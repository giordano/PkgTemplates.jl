"""
    (::Template)(pkg::AbstractString)

Generate a package named `pkg` from a [`Template`](@ref).
"""
function (t::Template)(pkg::AbstractString)
    endswith(pkg, ".jl") && (pkg = pkg[1:end-3])
    pkg_dir = joinpath(t.dir, pkg)

    try
        # Create the directory with some boilerplate inside.
        Pkg.generate(pkg_dir)

        # Replace the authors field with the template's authors, and add a compat entry.
        if !isempty(t.authors)
            path = joinpath(pkg_dir, "Project.toml")
            toml = TOML.parsefile(path)
            toml["authors"] = t.authors
            get!(toml, "compat", Dict())["julia"] = compat_version(t.julia_version)
            open(io -> TOML.print(io, toml), path, "w")
        end

        if t.git
            # Initialize the repo, make a commit, and set the remote.
            repo = LibGit2.init(pkg_dir)
            LibGit2.commit(repo, "Initial commit")
            rmt = if t.ssh
                "git@$(t.host):$(t.user)/$pkg.jl.git"
            else
                "https://$(t.host)/$(t.user)/$pkg.jl"
            end
            close(LibGit2.GitRemote(repo, "origin", rmt))
        end

        # Generate the files.
        foreach(p -> gen_plugin(p, t, pkg_dir), values(t.plugins))

        if t.git
            # Commit the files.
            LibGit2.add!(repo, ".")
            msg = "Files generated by PkgTemplates"
            installed = Pkg.installed()
            if haskey(installed, "PkgTemplates")
                ver = string(installed["PkgTemplates"])
                msg *= "\n\nPkgTemplates version: $ver"
            end
            LibGit2.commit(repo, msg)
        end

        if t.develop
            # Add the new package to the current environment.
            Pkg.develop(PackageSpec(; path=pkg_dir))
        end

        @info "New package is at $pkg_dir"
    catch
        rm(pkg_dir; recursive=true, force=true)
        rethrow()
    end
end

# Format the version to be included in Project.toml's [compat] section.
function compat_version(v::VersionNumber)
    return if v.patch == 0 && v.minor == 0
        string(v.major)
    elseif v.patch == 0
        "$(v.major).$(v.minor)"
    else
        "$(v.major).$(v.minor).$(v.patch)"
    end
end
