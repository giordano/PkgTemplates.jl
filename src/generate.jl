const TEST_UUID = "8dfed614-e22c-5e08-85e1-65c5234f0b40"

"""
    (::Template)(pkg::AbstractString)

Generate a package named `pkg` from a [`Template`](@ref).
"""
function (t::Template)(pkg::AbstractString)
    endswith(pkg, ".jl") && (pkg = pkg[1:end-3])
    pkg_dir = joinpath(t.dir, pkg)
    ispath(pkg_dir) && throw(ArgumentError("$pkg_dir already exists"))

    try
        # Create the directory with some boilerplate inside.
        Pkg.generate(pkg_dir)

        # Add a [compat] section for Julia. By default, Julia 1.x is supported.
        open(joinpath(pkg_dir, "Project.toml"), "a") do io
            println(io, "\n[compat]\njulia = \"1\"")
        end

        # Replace the authors field with the template's authors.
        if !isempty(t.authors)
            path = joinpath(pkg_dir, "Project.toml")
            project = read(path, String)
            authors = string("[", join(map(repr âˆ˜ strip, split(t.authors, ",")), ", "), "]")
            write(path, replace(project, r"authors = .*" => "authors = $authors"))
        end

        if t.git
            # Initialize the repo, make a commit, and set the remote.
            repo = LibGit2.init(pkg_dir)
            LibGit2.commit(repo, "Initial commit")
            rmt = if t.ssh
                "git@$(t.host):$(t.user)/$pkg.jl.git"
            else
                "https://$(t.host)/$(t.user)/$pkg.jl"
            end
            close(LibGit2.GitRemote(repo, "origin", rmt))
        end

        # Generate the files.
        foreach(p -> gen_plugin(p, t, pkg_dir), values(t.plugins))

        if t.git
            # Commit the files.
            LibGit2.add!(repo, ".")
            LibGit2.commit(repo, "Files generated by PkgTemplates")
        end

        if t.develop
            # Add the new package to the current environment.
            Pkg.develop(PackageSpec(; path=pkg_dir))
        end

        @info "New package is at $pkg_dir"
    catch
        rm(pkg_dir; recursive=true, force=true)
        rethrow()
    end
end
